diff --git a/android/JackAndroidThread.cpp b/android/JackAndroidThread.cpp
index b30dc78..274c538 100644
--- a/android/JackAndroidThread.cpp
+++ b/android/JackAndroidThread.cpp
@@ -127,20 +127,20 @@ int JackAndroidThread::StartImp(jack_native_thread_t* thread, int priority, int
 
     if (realtime) {
 
-        jack_log("JackAndroidThread::StartImp : create RT thread");
+        // jack_log("JackAndroidThread::StartImp : create RT thread");
 
-        if ((res = pthread_attr_setschedpolicy(&attributes, JACK_SCHED_POLICY))) {
-            jack_error("Cannot set RR scheduling class for RT thread res = %d", res);
-            return -1;
-        }
+        // if ((res = pthread_attr_setschedpolicy(&attributes, JACK_SCHED_POLICY))) {
+        //     jack_error("Cannot set RR scheduling class for RT thread res = %d", res);
+        //     return -1;
+        // }
 
-        memset(&rt_param, 0, sizeof(rt_param));
-        rt_param.sched_priority = priority;
+        // memset(&rt_param, 0, sizeof(rt_param));
+        // rt_param.sched_priority = priority;
 
-        if ((res = pthread_attr_setschedparam(&attributes, &rt_param))) {
-            jack_error("Cannot set scheduling priority for RT thread res = %d", res);
-            return -1;
-        }
+        // if ((res = pthread_attr_setschedparam(&attributes, &rt_param))) {
+        //     jack_error("Cannot set scheduling priority for RT thread res = %d", res);
+        //     return -1;
+        // }
 
     } else {
         jack_log("JackAndroidThread::StartImp : create non RT thread");
@@ -243,15 +243,15 @@ int JackAndroidThread::AcquireRealTimeImp(jack_native_thread_t thread, int prior
     memset(&rtparam, 0, sizeof(rtparam));
     rtparam.sched_priority = priority;
 
-    jack_log("JackAndroidThread::AcquireRealTimeImp priority = %d", priority);
+    // jack_log("JackAndroidThread::AcquireRealTimeImp priority = %d", priority);
 
 #ifndef JACK_ANDROID_REALTIME_SCHED
-    if ((res = pthread_setschedparam(thread, JACK_SCHED_POLICY, &rtparam)) != 0) {
-        jack_error("Cannot use real-time scheduling (RR/%d)"
-                   "(%d: %s)", rtparam.sched_priority, res,
-                   strerror(res));
-        return -1;
-    }
+    // if ((res = pthread_setschedparam(thread, JACK_SCHED_POLICY, &rtparam)) != 0) {
+    //     jack_error("Cannot use real-time scheduling (RR/%d)"
+    //                "(%d: %s)", rtparam.sched_priority, res,
+    //                strerror(res));
+    //     return -1;
+    // }
 #else
     if ((res = android::requestPriority(getpid(), gettid(), priority)) != 0) {
         jack_log("Failed to get SCHED_FIFO priority pid %d tid %d; error %d",
diff --git a/posix/JackShmMem_os.h b/posix/JackShmMem_os.h
index b572342..5e71b51 100644
--- a/posix/JackShmMem_os.h
+++ b/posix/JackShmMem_os.h
@@ -24,9 +24,9 @@
 #include <sys/types.h>
 #include <sys/mman.h>
 
-#define CHECK_MLOCK(ptr, size) (mlock((ptr), (size)) == 0)
-#define CHECK_MUNLOCK(ptr, size) (munlock((ptr), (size)) == 0)
-#define CHECK_MLOCKALL() (mlockall(MCL_CURRENT | MCL_FUTURE) == 0)
-#define CHECK_MUNLOCKALL() (munlockall() == 0)
+#define CHECK_MLOCK(ptr, size) (TRUE)
+#define CHECK_MUNLOCK(ptr, size) (TRUE)
+#define CHECK_MLOCKALL() (TRUE)
+#define CHECK_MUNLOCKALL() (TRUE)
 
 #endif
