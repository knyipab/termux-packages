diff --git a/common/shm.c b/common/shm.c
index b1e7fc7..94e891c 100644
--- a/common/shm.c
+++ b/common/shm.c
@@ -50,7 +50,7 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <sys/shm.h>
-#include <sys/sem.h>
+#include <semaphore.h>
 #include <stdlib.h>
 #include "promiscuous.h"
 
@@ -143,12 +143,13 @@ static jack_shm_registry_t *jack_shm_registry = NULL;
  * again on that machine until after a reboot.
  */
 
-#define JACK_SEMAPHORE_KEY 0x282929
+// #define JACK_SEMAPHORE_NAME "/jack_termux_semaphore"
 #ifndef USE_POSIX_SHM
-#define JACK_SHM_REGISTRY_KEY JACK_SEMAPHORE_KEY
+#define JACK_SHM_REGISTRY_KEY 0x282929
 #endif
 
 static int semid = -1;
+static sem_t semaphore;
 
 #ifdef WIN32
 
@@ -195,55 +196,35 @@ semaphore_error (char *msg)
 static int
 semaphore_init ()
 {
-	key_t semkey = JACK_SEMAPHORE_KEY;
-	struct sembuf sbuf;
-	int create_flags = IPC_CREAT | IPC_EXCL
-		| S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;
-
 	/* Get semaphore ID associated with this key. */
-	if ((semid = semget(semkey, 0, 0)) == -1) {
-
-		/* Semaphore does not exist - Create. */
-		if ((semid = semget(semkey, 1, create_flags)) != -1) {
-
-			/* Initialize the semaphore, allow one owner. */
-			sbuf.sem_num = 0;
-			sbuf.sem_op = 1;
-			sbuf.sem_flg = 0;
-			if (semop(semid, &sbuf, 1) == -1) {
-                semaphore_error ("semop");
-                return -1;
-			}
-
-		} else if (errno == EEXIST) {
-			if ((semid = semget(semkey, 0, 0)) == -1) {
-                semaphore_error ("semget");
-                return -1;
-			}
-
-		} else {
-            semaphore_error ("semget creation");
-            return -1;
-		}
+	// if ((semid = sem_open(JACK_SEMAPHORE_NAME, O_CREAT, 0777, 1)) == SEM_FAILED) {
+	if ((semid = sem_init(&semaphore, 1, 1)) == -1) {
+		semaphore_error("sem_open");
+		return -1;
 	}
 
     return 0;
 }
 
-static inline int
+static int
 semaphore_add (int value)
 {
-	struct sembuf sbuf;
-
-	sbuf.sem_num = 0;
-	sbuf.sem_op = value;
-	sbuf.sem_flg = SEM_UNDO;
-
-	if (semop(semid, &sbuf, 1) == -1) {
-		semaphore_error ("semop");
-        return -1;
-	}
-
+    if (value == 0) { return 0; }
+    else if (value > 0) {
+        for (int i = 0; i < value; i++) {
+            if (sem_post(&semaphore) == -1) {
+                semaphore_error("sem_post");
+                return -1;
+            }
+        }
+    } else if (value < 0) {
+    	for (int i = 0; i > value; i--) {
+            if (sem_wait(&semaphore) == -1) {
+                semaphore_error("sem_wait");
+                return -1;
+            }
+        }
+    }
     return 0;
 }
 
@@ -705,6 +686,66 @@ jack_attach_lib_shm_read (jack_shm_info_t* si)
 
 #ifdef USE_POSIX_SHM
 
+
+static int shm_unlink(const char *name) {
+    size_t namelen;
+    char *fname;
+
+    /* Construct the filename.  */
+    while (name[0] == '/') ++name;
+
+    if (name[0] == '\0') {
+        /* The name "/" is not supported.  */
+        errno = EINVAL;
+        return -1;
+    }
+
+    namelen = strlen(name);
+    fname = (char *) alloca(sizeof("@TERMUX_PREFIX@@TERMUX_PREFIX@/tmp/") - 1 + namelen + 1);
+    memcpy(fname, "@TERMUX_PREFIX@@TERMUX_PREFIX@/tmp/", sizeof("@TERMUX_PREFIX@@TERMUX_PREFIX@/tmp/") - 1);
+    memcpy(fname + sizeof("@TERMUX_PREFIX@@TERMUX_PREFIX@/tmp/") - 1, name, namelen + 1);
+
+    return unlink(fname);
+}
+
+static int shm_open(const char *name, int oflag, mode_t mode) {
+    size_t namelen;
+    char *fname;
+    int fd;
+
+    /* Construct the filename.  */
+    while (name[0] == '/') ++name;
+
+    if (name[0] == '\0') {
+        /* The name "/" is not supported.  */
+        errno = EINVAL;
+        return -1;
+    }
+
+    namelen = strlen(name);
+    fname = (char *) alloca(sizeof("@TERMUX_PREFIX@@TERMUX_PREFIX@/tmp/") - 1 + namelen + 1);
+    memcpy(fname, "@TERMUX_PREFIX@@TERMUX_PREFIX@/tmp/", sizeof("@TERMUX_PREFIX@@TERMUX_PREFIX@/tmp/") - 1);
+    memcpy(fname + sizeof("@TERMUX_PREFIX@@TERMUX_PREFIX@/tmp/") - 1, name, namelen + 1);
+
+    fd = open(fname, oflag, mode);
+    if (fd != -1) {
+        /* We got a descriptor.  Now set the FD_CLOEXEC bit.  */
+        int flags = fcntl(fd, F_GETFD, 0);
+        flags |= FD_CLOEXEC;
+        flags = fcntl(fd, F_SETFD, flags);
+
+        if (flags == -1) {
+            /* Something went wrong.  We cannot return the descriptor.  */
+            int save_errno = errno;
+            close(fd);
+            fd = -1;
+            errno = save_errno;
+        }
+    }
+
+    return fd;
+}
+
 /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * POSIX interface-dependent functions
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
diff --git a/common/shm.h b/common/shm.h
index 49b8dcb..3f0cf3a 100644
--- a/common/shm.h
+++ b/common/shm.h
@@ -70,6 +70,7 @@ extern "C"
 #endif
     typedef char shm_name_t[SHM_NAME_MAX];
     typedef shm_name_t jack_shm_id_t;
+    typedef int jack_shm_fd_t;
 
 #elif WIN32
 #define NAME_MAX 255
diff --git a/wscript b/wscript
index c77d2fb..09b0411 100644
--- a/wscript
+++ b/wscript
@@ -423,8 +423,8 @@ def configure(conf):
         conf.define('ADDON_DIR', conf.env['ADDON_DIR'])
         conf.define('JACK_LOCATION', os.path.normpath(os.path.join(conf.env['PREFIX'], 'bin')))
 
-    # if not conf.env['IS_WINDOWS']:
-    #     conf.define('USE_POSIX_SHM', 1)
+    if not conf.env['IS_WINDOWS']:
+        conf.define('USE_POSIX_SHM', 1)
     conf.define('JACKMP', 1)
     if conf.env['BUILD_JACKDBUS']:
         conf.define('JACK_DBUS', 1)
