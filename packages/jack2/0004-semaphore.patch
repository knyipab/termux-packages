diff --git a/common/shm.c b/common/shm.c
index b1e7fc7..20a3ab4 100644
--- a/common/shm.c
+++ b/common/shm.c
@@ -50,7 +50,7 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <sys/shm.h>
-#include <sys/sem.h>
+#include <semaphore.h>
 #include <stdlib.h>
 #include "promiscuous.h"
 
@@ -143,12 +143,12 @@ static jack_shm_registry_t *jack_shm_registry = NULL;
  * again on that machine until after a reboot.
  */
 
-#define JACK_SEMAPHORE_KEY 0x282929
+#define JACK_SEMAPHORE_NAME "/jack_termux_semaphore"
 #ifndef USE_POSIX_SHM
-#define JACK_SHM_REGISTRY_KEY JACK_SEMAPHORE_KEY
+#define JACK_SHM_REGISTRY_KEY 0x282929
 #endif
 
-static int semid = -1;
+static sem_t* semid = SEM_FAILED;
 
 #ifdef WIN32
 
@@ -195,36 +195,10 @@ semaphore_error (char *msg)
 static int
 semaphore_init ()
 {
-	key_t semkey = JACK_SEMAPHORE_KEY;
-	struct sembuf sbuf;
-	int create_flags = IPC_CREAT | IPC_EXCL
-		| S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;
-
 	/* Get semaphore ID associated with this key. */
-	if ((semid = semget(semkey, 0, 0)) == -1) {
-
-		/* Semaphore does not exist - Create. */
-		if ((semid = semget(semkey, 1, create_flags)) != -1) {
-
-			/* Initialize the semaphore, allow one owner. */
-			sbuf.sem_num = 0;
-			sbuf.sem_op = 1;
-			sbuf.sem_flg = 0;
-			if (semop(semid, &sbuf, 1) == -1) {
-                semaphore_error ("semop");
-                return -1;
-			}
-
-		} else if (errno == EEXIST) {
-			if ((semid = semget(semkey, 0, 0)) == -1) {
-                semaphore_error ("semget");
-                return -1;
-			}
-
-		} else {
-            semaphore_error ("semget creation");
-            return -1;
-		}
+	if ((semid = sem_open(JACK_SEMAPHORE_NAME, O_CREAT, 0777, 1)) == SEM_FAILED) {
+		semaphore_error("sem_open");
+		return -1;
 	}
 
     return 0;
@@ -233,17 +207,22 @@ semaphore_init ()
 static inline int
 semaphore_add (int value)
 {
-	struct sembuf sbuf;
-
-	sbuf.sem_num = 0;
-	sbuf.sem_op = value;
-	sbuf.sem_flg = SEM_UNDO;
-
-	if (semop(semid, &sbuf, 1) == -1) {
-		semaphore_error ("semop");
-        return -1;
-	}
-
+    if (value == 0) { return 0; }
+    else if (value > 0) {
+        for (int i = 0; i < value; i++) {
+            if (sem_post(semid) == -1) {
+                semaphore_error("sem_post");
+                return -1;
+            }
+        }
+    } else if (value < 0) {
+        for (int i = 0; i > value; i--) {
+            if (sem_wait(semid) == -1) {
+                semaphore_error("sem_wait");
+                return -1;
+            }
+        }
+    }
     return 0;
 }
 
@@ -252,7 +231,7 @@ semaphore_add (int value)
 static int
 jack_shm_lock_registry (void)
 {
-	if (semid == -1) {
+	if (semid == SEM_FAILED) {
         if (semaphore_init () < 0)
             return -1;
     }
